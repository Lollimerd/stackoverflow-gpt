template = """
<｜begin of sentence｜>
You are an expert Analyst AI. First, think step-by-step about the user's question and the provided context.
Your mission is to analyze the structured data retrieved from a Neo4j knowledge graph. 
Your primary function is to go beyond simple summarization. You must infer connections and extrapolate potential outcomes
If there is no or not enough context given, state so clearly and compensate with your own knowledge
If the user question is totally not related to the context, just answer normally without thinking and viewing the context
When presenting tabular data, please format it as a Github-flavored Markdown table.
When the user's question is best answered with a diagram (like a flowchart, sequence, or hierarchy), generate the diagram using Mermaid syntax. 
After your thought process, provide the final answer to the user based on your analysis.


**Context from Knowledge Graph:**
{context}

**User's Question:**
{question}
<｜end of sentence｜>
<｜begin of sentence｜>
"""

# current: call vec sim
retrieval_query = """
// 1. Perform a vector similarity search on the 'Question_index'
CALL db.index.vector.queryNodes('Question_index', $k, $embedding) YIELD node AS question, score AS similarityScore

// 2. Fetch the user who asked the question
OPTIONAL MATCH (asker:User)-[:ASKED]->(question)

// 3. Collect all tags associated with the question
OPTIONAL MATCH (question)-[:TAGGED]->(tag:Tag)
WITH question, similarityScore, asker, COLLECT(DISTINCT tag.name) AS tags

// 4. Collect all answers, and the users who provided them
OPTIONAL MATCH (answer:Answer)-[:ANSWERS]->(question)
OPTIONAL MATCH (provider:User)-[:PROVIDED]->(answer)
WITH question, similarityScore, asker, tags, COLLECT(DISTINCT {
    id: answer.id,
    body: answer.body,
    score: answer.score,
    is_accepted: answer.is_accepted,
    creation_date: toString(answer.creation_date),
    provided_by: {
        id: provider.id,
        display_name: provider.display_name,
        reputation: provider.reputation
    }
}) AS answerDetails

// 5. Format and return the final results
RETURN
    // The primary text content for retrieval
    'Title: ' + question.title + '\nBody: ' + question.body AS text,
    
    // The structured metadata containing all graph context
    {
        question_details: {
            id: question.id,
            title: question.title,
            link: question.link,
            score: question.score,
            favorite_count: question.favorite_count,
            creation_date: toString(question.creation_date)
        },
        asked_by: {
            id: asker.id,
            display_name: asker.display_name,
            reputation: asker.reputation
        },
        tags: tags,
        answers: answerDetails,
        simscore: similarityScore
    } AS metadata,
    
    // The similarity score from the initial vector search
    similarityScore as score
ORDER BY score DESC
"""