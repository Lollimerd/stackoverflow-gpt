version: '3.8'
name: graphrag-chatbot

services:
  ollama:
    image: ollama/ollama
    container_name: localLLMs
    ports:
      - "11434:11434"
    gpus: all
    restart: unless-stopped
    networks:
      - app-network

  netflix:
    container_name: movieDB
    image: neo4j:latest # Using 'latest' for the most recent Community Edition.

    ports:
      - "7474:7474" # Neo4j Browser / HTTP API
      - "7687:7687" # Bolt protocol for drivers
    volumes:
      - neo4j_movie_data:/data
    environment:
      # --- Neo4j Authentication (REQUIRED) ---
      # It's recommended to use a .env file for sensitive info like passwords.
      - NEO4J_AUTH=neo4j/password

      # --- Plugins Configuration ---
      # This is the key part to enable both GDS and APOC
      # 'apoc' is for APOC Core. For APOC Extended, you might use 'apoc-extended'
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]

      # --- Security Configuration for Procedures (CRITICAL for plugins to work) ---
      # Allow all procedures from APOC and GDS.
      # You can make this more granular if needed (e.g., apoc.coll.*, gds.alpha.*)
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      # Ensure procedures are explicitly allowed if you have a strict allowlist
      - NEO4J_dbms_security_procedures_allowlist=apoc.*,gds.*

      # --- APOC specific configurations (Optional, but often useful) ---
      # Enable APOC's file import/export features (for CSV, JSON etc.)
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true

      # --- Memory Configuration (Recommended for GDS) ---
      # Adjust these values based on your host's available RAM and graph size.
      # GDS often requires more memory for graph projections.
      - NEO4J_server_memory_heap_initial__size=1G # Minimum initial heap size
      - NEO4J_server_memory_heap_max__size=4G   # Maximum heap size
      - NEO4J_server_memory_pagecache_size=2G # For large graphs, dedicate memory to page cache
      # --- Enable Java Vector API (SIMD) ---
      - NEO4J_server_jvm_additional=--add-modules=jdk.incubator.vector
    networks:
      - app-network
    depends_on:
      - ollama

  graphDB:
    container_name: stackoverflowDB
    image: neo4j:latest # Using 'latest' for the most recent Community Edition.
    ports:
      - "7473:7474" # Neo4j Browser / HTTP API
      - "7686:7687" # Bolt protocol for drivers
    volumes:
      - neo4j_stackoverflow_data:/data
    environment:
      # --- Neo4j Authentication (REQUIRED) ---
      # It's recommended to use a .env file for sensitive info like passwords.
      - NEO4J_AUTH=${NEO4J_USERNAME-neo4j}/${NEO4J_PASSWORD-password}

      # --- Plugins Configuration ---
      # This is the key part to enable both GDS and APOC
      # 'apoc' is for APOC Core. For APOC Extended, you might use 'apoc-extended'
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]

      # --- Security Configuration for Procedures (CRITICAL for plugins to work) ---
      # Allow all procedures from APOC and GDS.
      # You can make this more granular if needed (e.g., apoc.coll.*, gds.alpha.*)
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      # Ensure procedures are explicitly allowed if you have a strict allowlist
      - NEO4J_dbms_security_procedures_allowlist=apoc.*,gds.*

      # --- APOC specific configurations (Optional, but often useful) ---
      # Enable APOC's file import/export features (for CSV, JSON etc.)
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true

      # --- Memory Configuration (Recommended for GDS) ---
      # Adjust these values based on your host's available RAM and graph size.
      # GDS often requires more memory for graph projections.
      - NEO4J_server_memory_heap_initial__size=1G # Minimum initial heap size
      - NEO4J_server_memory_heap_max__size=4G   # Maximum heap size
      - NEO4J_server_memory_pagecache_size=2G # For large graphs, dedicate memory to page cache
      # --- Enable Java Vector API (SIMD) ---
      - NEO4J_server_jvm_additional=--add-modules=jdk.incubator.vector
    networks:
      - app-network
    depends_on:
      - ollama

  # Define the Qdrant service.
  # qdrant:
  #   # Use the official Qdrant Docker image.
  #   # It's good practice to pin to a specific version for production stability, e.g., qdrant/qdrant:v1.9.2
  #   image: qdrant/qdrant:latest
    
  #   # A friendly name for the container to easily identify it.
  #   container_name: qdrant_db
    
  #   # Restart policy to ensure the service comes back online after a reboot or crash.
  #   restart: always
    
  #   # Map the container's ports to the host machine.
  #   ports:
  #     # Port 6333 is for the main gRPC API (used by clients).
  #     - "6333:6333"
  #     # Port 6334 provides access to the web UI and REST API.
  #     - "6334:6334"
      
  #   # Define volumes to persist data. This prevents data loss when the container stops or is removed.
  #   volumes:
  #     # Mount a named volume 'qdrant_data' to the standard storage path inside the container.
  #     - qdrant_data:/qdrant/storage
      
    # (Optional) Uncomment the following lines to set an API key for added security.
    # If you enable this, you must include the API key in your client's request headers.
    # environment:
    #   - QDRANT__SERVICE__API_KEY=your_super_secret_api_key

networks:
  app-network:
    driver: bridge

volumes:
  neo4j_movie_data:
  neo4j_stackoverflow_data: